@rendermode InteractiveServer
@inject UserRegistrationService userRegistrationService
@implements IDisposable

@if (userRegistrationService.CurrentUser != null)
{
    <div class="nav-item px-3">
        <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="ToggleDropdown">
            @userRegistrationService.CurrentUser.Name
        </button>
        <div class="dropdown-menu @(isDropdownOpen ? "show" : "")">
            <NavLink class="dropdown-item custom-nav-link" href="profile">Profile</NavLink>
            <button class="dropdown-item" @onclick="userRegistrationService.SignOutUser">Sign Out</button>
        </div>
    </div>
}
else
{
    <a href="regist">Sign-up</a>
}

@code {
    private bool isDropdownOpen = false;

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }


    protected override void OnInitialized()
    {
        userRegistrationService.OnCurrentUserChanged += HandleCurrentUserChanged;
    }

    private void HandleCurrentUserChanged()
    {
        InvokeAsync(StateHasChanged); //https://www.youtube.com/watch?v=JoSwm6HAYgM&ab_channel=TutorialsTeam
        //     InvokeAsync(() =>
        // {
        //     StateHasChanged();
        //     NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        //});
    }

    public void Dispose()
    {
        userRegistrationService.OnCurrentUserChanged -= HandleCurrentUserChanged;
    }
}

<style>
    .custom-nav-link {
        padding: .0rem 0rem;
    }
</style>

