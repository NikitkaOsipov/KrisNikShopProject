@rendermode InteractiveServer
@inject UserRegistrationService userRegistrationService

<div class="modal" tabindex="-1" style="display:block">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Card Information</h5>
            </div>
            <div class="modal-body">
                <EditForm Model="CardInfo" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="CardNumber">Card Number:</label>
                        <InputText id="CardNumber" class="form-control" @bind-Value="CardInfo.CardNumber" />
                    </div>

                    <div class="form-group">
                        <label for="CVC">CVC:</label>
                        <InputText id="CVC" class="form-control" @bind-Value="CardInfo.CVC" />
                    </div>

                    <div class="form-group">
                        <label for="ExpiryYear">Expiry Year:</label>
                        <InputText id="ExpiryYear" class="form-control" @bind-Value="CardInfo.ExpiryYear" />
                    </div>

                    <div class="form-group">
                        <label for="NameSurname">Name Surname:</label>
                        <InputText id="NameSurname" class="form-control" @bind-Value="CardInfo.NameSurname" />
                    </div>

                    <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => OnCancel.InvokeAsync(false)">Cancel</button>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    public CardInfoModel CardInfo { get; set; } = new CardInfoModel();
    
    [Parameter]
    public EventCallback<bool> OnCancel { get; set; }

    [Parameter]
    public TaskCompletionSource<bool> Tcs { get; set; }


    public void HandleValidSubmit()
    {
        UserModel userToChange = userRegistrationService.CurrentUser;

        userToChange.CardNumber = CardInfo.CardNumber.Trim();
        userToChange.CardCVC2 = CardInfo.CVC.Trim();
        userToChange.CardDate = CardInfo.ExpiryYear.Trim();
        userToChange.CardNameSurname = CardInfo.NameSurname.Trim();


        userRegistrationService.ChangeUserData(userToChange);
        OnCancel.InvokeAsync(true);

        if (Tcs != null && !Tcs.Task.IsCompleted)
        {
            Tcs.SetResult(true);
        }
    }


    public class CardInfoModel
    {
        public string CardNumber { get; set; }
        public string CVC { get; set; }
        public string ExpiryYear { get; set; }
        public string NameSurname { get; set; }
    }
}

<style>
    .modal {
		position: fixed;
		z-index: 1;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		overflow: auto;
		background-color: rgba(0,0,0,0.4);
	}

	.modal-content {
		background-color: #fefefe;
		margin: 15% auto;
		padding: 20px;
		border: 1px solid #888;
		width: 80%;
	}
</style>
