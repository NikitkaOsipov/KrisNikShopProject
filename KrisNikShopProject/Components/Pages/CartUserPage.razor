@page "/cart/{userId:int}"
@inject CartStorageService CartStorageService
@inject OrderStorageService OrderStorageService
@inject UserRegistrationService UserRegistrationService
@using KrisNikShopProject.Components.Pages

@rendermode InteractiveServer

@if (ShowCardSubmitPage)
{
    <CardSubmitPage OnCancel="HideCardSubmitPage" Tcs="tcs" />
}

@if (cartItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@User.Name's CART</h1>
    if (cartItems.Count != 0 && User.Id == UserRegistrationService.CurrentUser.Id)
	{
        <button class="btn btn-primary" @onclick="OrderSelectedItems">Order Selected Items</button>
        <button class="btn btn-primary" @onclick="OrderAllItems">Order All Items</button>
    }
    else
    {
        <p><em>Your cart is empty</em></p>
    }

    <ul>
        @foreach (var item in cartItems)
        {
            <div class="row">
                <div class="col-md-4">
                    <img src="@item.Image" alt="@item.Name" class="img-fluid" />
                </div>
                <div class="col-md-4">
                    <h5>@item.Name</h5>
                    <p>@item.Description</p>
                    <p>Price: @item.Price</p>
                     <p>Quantity: @item.Quantity</p> @* ERROR IDK WHY PLZ HELP NIKITA *@
                    
                </div>

                <div class="col-md-4">
                    <label class="checkbox-label">
                        <input type="checkbox" @bind="selectedItems[item.Id]" />
                        <span>Select for ordering</span>
                    </label>
                    @if (User.Id == UserRegistrationService.CurrentUser.Id) 
                    {
                        <button class="btn btn-primary" @onclick="() => OrderItem(item)">Order Item</button>
                    }

                    <div>
                    <button class="btn btn-danger" @onclick="() => RemoveFromCart(item, quantitiesToRemove[item.Id])">Remove from Cart: @quantitiesToRemove[item.Id]</button>
                    @if (item.Quantity > 1)
                    {
                        <input type="range" min="1" max="@item.Quantity" @bind="quantitiesToRemove[item.Id]" @oninput="UpdateQuantityToRemove" class="slider" />
                    }
                    </div>
                </div>
            </div>
            <hr />
        }
    </ul>
    
}


@code {
    [Parameter]
    public int UserId { get; set; }
    private UserModel? User { get; set; }

    public bool ShowCardSubmitPage { get; set; } 

    private CardDetails cardDetails = new CardDetails();

    private TaskCompletionSource<bool> tcs = null;

    private List<ProductModel> cartItems;
    private Dictionary<int, int> quantitiesToRemove = new Dictionary<int, int>();
    private Dictionary<int, bool> selectedItems = new Dictionary<int, bool>();


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => User = UserRegistrationService.GetUserById(UserId));
        await Task.Run(() => cartItems = CartStorageService.GetAllProducts(User));
        foreach (var item in cartItems)
        {
            quantitiesToRemove[item.Id] = 1;
            selectedItems[item.Id] = false;
        }
    }

    private void RemoveFromCart(ProductModel item, int quantityToRemove)
    {
        CartStorageService.RemoveFromCarts(item, quantityToRemove);
        cartItems = CartStorageService.GetAllProducts();
        StateHasChanged();

        foreach (var cartItem in cartItems)
        {
            quantitiesToRemove[cartItem.Id] = 1;
        }
        UserRegistrationService.SignInUser(UserRegistrationService.CurrentUser);
    }

    private async void OrderItem(ProductModel product)
    {
        if(UserRegistrationService?.CurrentUser?.CardNumber == null) 
        {
            tcs = new TaskCompletionSource<bool>();
            ShowCardSubmitPage = true;
            StateHasChanged();
            await tcs.Task;
        } 
        OrderModel order = new OrderModel(product, UserRegistrationService!.CurrentUser!);
        OrderStorageService.AddOrder(order);
        RemoveFromCart(product, product.Quantity);
    }

    private void OrderSelectedItems()
    {
        foreach (var item in cartItems)
        {
            if (selectedItems[item.Id])
            {
                OrderItem(item);
            }
        }
    }

    private void OrderAllItems()
    {
        foreach (var item in cartItems)
        {
            OrderItem(item);
        }
    }

    private void HideCardSubmitPage(bool isCardSubmissionSuccessful = false)
    {
        ShowCardSubmitPage = false;
        if (isCardSubmissionSuccessful && tcs != null && !tcs.Task.IsCompleted)
        {
            tcs.SetResult(true);
        }
    }

    private void UpdateQuantityToRemove(ChangeEventArgs e)
    {
        StateHasChanged();
    }


    public class CardDetails
    {
        public string CardNumber { get; set; }
        public string CSC { get; set; }
        public string ExpiryYear { get; set; }
        public string NameOnCard { get; set; }
    }
}

<style>
    body {
        font-family: Arial, sans-serif;
    }

    .row {
        margin-bottom: 20px;
        padding: 10px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
    }

        .row:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    .col-md-4 {
        padding: 10px;
    }

    .img-fluid {
        max-width: 100%;
        height: auto;
    }

    h5 {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    p {
        margin-bottom: 20px;
    }

    .btn {
        margin-right: 10px;
        margin-bottom: 10px;
    }

    .btn-danger {
        background-color: #f44336;
        border: none;
        color: white;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

        .btn-danger:hover {
            background-color: #da190b;
            color: white;
        }

    .btn-primary {
        background-color: #008CBA;
        border: none;
        color: white;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #006494;
        color: white;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
    }

    .checkbox-label input[type="checkbox"] {
        margin-right: 10px;
    }
</style>