@page "/productdetail/{Id}"
@inject ProductStorageService productStorageService
@inject CartStorageService cartStorageService
@inject UserRegistrationService userRegistrationService

@rendermode InteractiveServer

@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="product-detail">
        <div class="product-image-container">
            <img src="@product.Image" alt="@product.Name" class="product-image" />
        </div>
        <div class="product-info">
            <h2>@product.Name</h2>
            <p>@product.Description</p>
            <p>Category: @product.Category</p>
            <p>Brand: @product.Brand</p>
            <p>Size: @product.Size</p>
            <p>Material: @product.Material</p>
            <p>Country: @product.Country</p>
            <p>Price: @product.Price.ToString("C")</p>
            <p>Travel time: @product.TravelTime</p>
            @if (userRegistrationService.CurrentUser == null)
            {
                <p style="color:red;">You must <a href="/sign-in">sign in</a> to add products to the cart.</p>
            }
            else
            {
                <button class="btn btn-primary" @onclick="AddToCart">Add to Cart</button>
                <div class="quantity-control">
                    <p>Quantity:</p>
                    <input type="range" min="@MinValue" max="@MaxValue" @bind="CurrentValue" @oninput="ValueChanged" />
                    <InputNumber class="quantity-input" @bind-Value="CurrentValue" min="@MinValue" max="@MaxValue" />
                    <p>Total Price: @((decimal)product.Price * (decimal)CurrentValue)</p>
                </div>
                @if (isAddedToCart)
                {
                    <p>Product was added to cart.</p>
                }
            }
        </div>
    </div>
}

@code {    
    public int MinValue { get; set; } = 1;
    public int MaxValue { get; set; } = 50;
    public int CurrentValue { get; set; } = 1;
    public EventCallback<int> CurrentValueChanged { get; set; }

    private async Task ValueChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newValue))
        {
            CurrentValue = newValue;
            await CurrentValueChanged.InvokeAsync(CurrentValue);
        }
    }

    [Parameter]
    public string? Id { get; set; }

    private ProductModel? product;
    private bool isAddedToCart = false;

    protected override async Task OnInitializedAsync()
    {
        product = await Task.Run(() => productStorageService.GetProductById(int.Parse(Id)));
    }

    private void AddToCart()
    {
        cartStorageService.AddProduct(product, CurrentValue);
        isAddedToCart = true;
        userRegistrationService.SignInUser(userRegistrationService.CurrentUser);
    }
}

<style>
    .product-detail {
        display: flex;
        gap: 20px;
        padding: 20px;
        border: 2px solid #ddd;
        border-radius: 10px;
        background-color: #f9f9f9;
        font-size: 18px;
    }

    .product-image-container {
        flex: 1;
    }

    .product-image {
        width: 500px;
        height: 500px;
        object-fit: cover;
        border-radius: 10px;
    }

    .product-info {
        flex: 2;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

        .product-info h2 {
            margin-bottom: 10px;
            font-size: 24px;
        }

        .product-info p {
            margin: 3px 0;
        }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 10px;
    }

    .quantity-input {
        width: 50px;
    }
</style>